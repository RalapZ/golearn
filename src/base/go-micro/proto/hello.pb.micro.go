// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: hello.proto

package hello

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ZoneInterface service

type ZoneInterfaceService interface {
	Zone(ctx context.Context, in *ZoneRequest, opts ...client.CallOption) (*ZoneResponse, error)
}

type zoneInterfaceService struct {
	c    client.Client
	name string
}

func NewZoneInterfaceService(name string, c client.Client) ZoneInterfaceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "zoneinterface"
	}
	return &zoneInterfaceService{
		c:    c,
		name: name,
	}
}

func (c *zoneInterfaceService) Zone(ctx context.Context, in *ZoneRequest, opts ...client.CallOption) (*ZoneResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneInterface.zone", in)
	out := new(ZoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZoneInterface service

type ZoneInterfaceHandler interface {
	Zone(context.Context, *ZoneRequest, *ZoneResponse) error
}

func RegisterZoneInterfaceHandler(s server.Server, hdlr ZoneInterfaceHandler, opts ...server.HandlerOption) error {
	type zoneInterface interface {
		Zone(ctx context.Context, in *ZoneRequest, out *ZoneResponse) error
	}
	type ZoneInterface struct {
		zoneInterface
	}
	h := &zoneInterfaceHandler{hdlr}
	return s.Handle(s.NewHandler(&ZoneInterface{h}, opts...))
}

type zoneInterfaceHandler struct {
	ZoneInterfaceHandler
}

func (h *zoneInterfaceHandler) Zone(ctx context.Context, in *ZoneRequest, out *ZoneResponse) error {
	return h.ZoneInterfaceHandler.Zone(ctx, in, out)
}
