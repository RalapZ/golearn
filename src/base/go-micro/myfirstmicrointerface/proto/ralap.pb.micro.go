// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ralap.proto

package ralap

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RespInfo service

func NewRespInfoEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RespInfo service

type RespInfoService interface {
	RespInfo(ctx context.Context, in *RalapRequest, opts ...client.CallOption) (*RalapResponse, error)
}

type respInfoService struct {
	c    client.Client
	name string
}

func NewRespInfoService(name string, c client.Client) RespInfoService {
	return &respInfoService{
		c:    c,
		name: name,
	}
}

func (c *respInfoService) RespInfo(ctx context.Context, in *RalapRequest, opts ...client.CallOption) (*RalapResponse, error) {
	req := c.c.NewRequest(c.name, "RespInfo.RespInfo", in)
	out := new(RalapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RespInfo service

type RespInfoHandler interface {
	RespInfo(context.Context, *RalapRequest, *RalapResponse) error
}

func RegisterRespInfoHandler(s server.Server, hdlr RespInfoHandler, opts ...server.HandlerOption) error {
	type respInfo interface {
		RespInfo(ctx context.Context, in *RalapRequest, out *RalapResponse) error
	}
	type RespInfo struct {
		respInfo
	}
	h := &respInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&RespInfo{h}, opts...))
}

type respInfoHandler struct {
	RespInfoHandler
}

func (h *respInfoHandler) RespInfo(ctx context.Context, in *RalapRequest, out *RalapResponse) error {
	return h.RespInfoHandler.RespInfo(ctx, in, out)
}
